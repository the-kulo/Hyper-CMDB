name: Deploy Frontend to Server

on:
  push:
    branches: [main]
    paths: ["ui/**"]

jobs:
  # Job 1: 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ./ui
        run: npm ci

      # ESLint
      - name: Run linting
        working-directory: ./ui
        run: npm run lint
        continue-on-error: true

      # TypeScript
      - name: Type check
        working-directory: ./ui
        run: npm run type-check
        continue-on-error: true

  # Job 2: 构建应用
  build:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ./ui
        run: npm ci

      - name: Build frontend
        working-directory: ./ui
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -f "ui/dist/index.html" ]; then
            echo "Build failed: index.html not found"
            exit 1
          fi
          echo "Build successful, files:"
          ls -la ui/dist/

      # 上传构建产物供后续 job 使用
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ui/dist/
          retention-days: 1

  # Job 3: 部署到服务器
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production  
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Prepare deployment on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 创建备份目录
            mkdir -p ${{ secrets.SERVER_PATH }}/backup
            
            # 备份当前版本（如果存在）
            if [ -d "${{ secrets.SERVER_PATH }}/current" ]; then
              mv ${{ secrets.SERVER_PATH }}/current ${{ secrets.SERVER_PATH }}/backup/$(date +%Y%m%d_%H%M%S)
            fi
            
            # 创建新的部署目录
            mkdir -p ${{ secrets.SERVER_PATH }}/current

      - name: Upload files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "dist/*"
          target: ${{ secrets.SERVER_PATH }}/current
          strip_components: 1

  # Job 4: 部署验证
  verify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            if [ ! -f "${{ secrets.SERVER_PATH }}/current/index.html" ]; then
              echo "Deployment failed: index.html not found on server"
              exit 1
            fi
            echo "Deployment successful!"
            echo "Files on server:"
            ls -la ${{ secrets.SERVER_PATH }}/current/

  # Job 5: 回滚处理（仅在失败时运行）
  rollback:
    needs: [deploy, verify]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback on failure
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            LATEST_BACKUP=$(ls -t ${{ secrets.SERVER_PATH }}/backup/ | head -1)
            if [ -n "$LATEST_BACKUP" ]; then
              rm -rf ${{ secrets.SERVER_PATH }}/current
              mv ${{ secrets.SERVER_PATH }}/backup/$LATEST_BACKUP ${{ secrets.SERVER_PATH }}/current
              echo "Rollback completed to $LATEST_BACKUP"
            fi

  # Job 6: 安全扫描
  security:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ./ui
        run: npm ci

      # 基础安全审计
      - name: Run npm security audit
        working-directory: ./ui
        run: npm audit --audit-level=moderate
        continue-on-error: true

      # GitHub 原生安全扫描
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Job 7: 性能检查
  performance:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        working-directory: ./ui
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./ui/dist

      # Bundle 大小检查
      - name: Check bundle size
        working-directory: ./ui
        run: |
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "📦 Bundle size: $BUNDLE_SIZE"
          
          # 设置大小限制
          BUNDLE_SIZE_BYTES=$(du -sb dist/ | cut -f1)
          MAX_SIZE=10485760  # 10MB in bytes
          
          if [ $BUNDLE_SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "❌ Bundle size ($BUNDLE_SIZE) exceeds limit (10MB)"
            exit 1
          else
            echo "✅ Bundle size ($BUNDLE_SIZE) is within limit"
          fi

      # 检查关键文件
      - name: Analyze build output
        working-directory: ./ui
        run: |
          echo "📊 Build analysis:"
          echo "Total files: $(find dist -type f | wc -l)"
          echo "JavaScript files: $(find dist -name '*.js' | wc -l)"
          echo "CSS files: $(find dist -name '*.css' | wc -l)"
          echo "Asset files: $(find dist -name '*.png' -o -name '*.jpg' -o -name '*.svg' -o -name '*.ico' | wc -l)"
          
          echo "\n📁 Largest files:"
          find dist -type f -exec du -h {} + | sort -rh | head -10

      # 依赖分析
      - name: Analyze dependencies
        working-directory: ./ui
        run: |
          echo "📋 Dependency analysis:"
          npm ls --depth=0 --json | jq -r '.dependencies | keys[]' | wc -l | xargs echo "Direct dependencies:"
          
          # 检查过时的依赖
          echo "\n🔍 Checking for outdated packages:"
          npm outdated || true

  # Job 8: 通知
  notify:
    needs: [quality-check, build, deploy, verify, security, performance]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment result
        run: |
          echo "📊 工作流执行结果:"
          echo "代码质量检查: ${{ needs.quality-check.result }}"
          echo "构建: ${{ needs.build.result }}"
          echo "安全扫描: ${{ needs.security.result }}"
          echo "性能检查: ${{ needs.performance.result }}"
          echo "部署: ${{ needs.deploy.result }}"
          echo "验证: ${{ needs.verify.result }}"
          
          if [ "${{ needs.verify.result }}" = "success" ]; then
            echo "✅ 部署成功到服务器 ${{ secrets.SERVER_HOST }}"
          else
            echo "❌ 部署失败，请检查日志"
          fi