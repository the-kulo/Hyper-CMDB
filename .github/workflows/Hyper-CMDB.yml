name: CI/CD Pipeline

# 触发条件：推送到master分支或创建Pull Request
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# 环境变量
env:
  GO_VERSION: '1.24.2'
  NODE_VERSION: '20'

jobs:
  # 后端构建和测试
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build backend
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o hyper-cmdb ./cmd
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: hyper-cmdb

  # 前端构建和测试
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install dependencies
      working-directory: ./ui
      run: npm ci
    
    - name: Run linting
      working-directory: ./ui
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./ui
      run: npm run build
    
    - name: Upload frontend artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: ui/dist

  # Docker构建
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-binary
        path: .
    
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ui/dist
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub 
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          your-dockerhub-username/hyper-cmdb:latest
          your-dockerhub-username/hyper-cmdb:${{ github.sha }}

  # 部署到服务器
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # 拉取最新镜像
          docker pull your-dockerhub-username/hyper-cmdb:latest
          
          # 停止旧容器
          docker stop hyper-cmdb || true
          docker rm hyper-cmdb || true
          
          # 启动新容器
          docker run -d \
            --name hyper-cmdb \
            -p 8080:8080 \
            --restart unless-stopped \
            your-dockerhub-username/hyper-cmdb:latest